<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: How To | Radu Cotescu's professional blog]]></title>
  <link href="http://radu.cotescu.com/category/how-to/atom.xml" rel="self"/>
  <link href="http://radu.cotescu.com/"/>
  <updated>2014-05-09T15:36:40+03:00</updated>
  <id>http://radu.cotescu.com/</id>
  <author>
    <name><![CDATA[Radu Cotescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tools required for opening a MacBook Pro]]></title>
    <link href="http://radu.cotescu.com/tools-required-for-opening-a-macbook-pro/"/>
    <updated>2012-06-04T01:45:00+03:00</updated>
    <id>http://radu.cotescu.com/tools-required-for-opening-a-macbook-pro</id>
    <content type="html"><![CDATA[<p>Last week my final MacBook Pro arrived. Since at Adobe we are forced to encrypt our hard-drives in order to protect our work (in case our machines get stolen) the IT team decided to provide us with SSD drives for our portable computers. The advantages are numerous:</p>

<ul>
<li><p>improved IO performance (encryption comes with a cost - I really wouldn't like to use it on a mechanical drive)</p></li>
<li><p>reduced power consumption</p></li>
<li><p>reduced operation noise (only the fans and the optical unit contain moving parts)</p></li>
<li><p>less dissipated heat</p></li>
</ul>


<p>Because I was in hurry to get the new machine set-up I decided to install the new SSD by myself. After all, it wasn't the first time I tore a computer apart. Big mistake...</p>

<!--more-->


<p>Apparently Apple uses the tiniest screws available. Most of the guides and forum posts on the subject mention that the only tools you need to access the user-replaceable components (the hard-drive and the RAM DIMMs) are a PH#00 and a T6 screwdriver. For n00bs, that's a Phillips 00 screwdriver (<strong>+</strong> shaped) and a Torx 0.6 (<strong>*</strong> shaped). Wrong!</p>

<p>It seems that the recommended PH#00 screwdriver is too big to safely remove the screws that keep the back lid attached to the body. Using a bigger screwdriver might end up in deforming the screws' heads. However the Phillips PH#000 is a perfect match. If you're looking to buy these two screwdrivers - the PH#000 and the T6 - I suggest you visit your local DIY store and look for precision screwdrivers. Try to buy a set that's made from high carbon steel if you want to use them for a longer time.</p>

<p>A very good guide for changing your Mac's hard-drive can be found <a href="http://www.ifixit.com/Guide/Installing-MacBook-Pro-15-Inch-Unibody-Late-2011-Hard-Drive-Replacement/7513/" title="Installing MacBook Pro 15&quot; Unibody Late 2011 Hard Drive Replacement">here</a>. Keep in mind, though, that you need a PH#000 screwdriver.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating your Ubuntu machine to a SSD drive]]></title>
    <link href="http://radu.cotescu.com/migrating-your-ubuntu-machine-to-a-ssd-drive/"/>
    <updated>2012-05-11T23:10:00+03:00</updated>
    <id>http://radu.cotescu.com/migrating-your-ubuntu-machine-to-a-ssd-drive</id>
    <content type="html"><![CDATA[<p>SSD drives have finally become affordable and more reliable than they used to be. Partly this was sure helped by the price boost of the traditional hard-disks manufactured in Thailand (I think everybody still reminds the <a href="http://en.wikipedia.org/wiki/2011_Thailand_flood" title="2011 Thailand flood">floods</a> from the summer of 2011). The competition helped the development of innovative solutions and after 4 years since their mass-consumption breakthrough they have managed to become a standard on ultrabooks and premium laptops.</p>

<p>Because the price / GB of the classic mechanical hard-disk was so low (as low as US$0.05 per GB for 3.5 inch drives and US$0.10 per GB for 2.5 inch drives), producers started to offer larger drives for the same money. Unfortunately SSD technologies cannot and probably will not evolve the same way due to memory degradations once the chip size decreases. In particular this led to higher prices for the same disk size, making SSDs more attractive for boot / OS drives instead of plain storage ones.</p>

<p>Migrating a current OS installation usually has to take into consideration that the SSD destination disk might not be able to fully accommodate the previously stored data. The following paragraphs will describe what solutions can be employed in order to successfully migrate an Ubuntu installation (or any other Linux distribution) to a SSD drive.</p>

<!-- more -->


<h1>How To</h1>

<p>Depending on the available storage space of the SSD, there are two available solutions:</p>

<ol>
<li><p>the destination drive is just as big as the source drive, or larger &ndash; <code>ddrescue</code></p></li>
<li><p>the destination drive is smaller than the source drive &ndash; <code>rsync</code>, <code>gparted</code>, <code>boot-repair</code></p></li>
</ol>


<p>Tools needed for both solutions:</p>

<ol>
<li><p>an Ubuntu live CD / live USB stick from which to boot and perform the migration;</p></li>
<li><p>at least two SATA drives, one for the source and one for the destination disk;</p></li>
<li><p>at least two SATA data cables and two SATA power cables if you're using a desktop machine to perform the migration, or a SATA to USB adaptor if you're using a laptop;</p></li>
<li><p>a Philips screwdriver to mount / un-mount the hard drives and possibly the 3.5" adaptor.</p></li>
</ol>


<p>It's time to connect the hard drives to your machine.</p>

<h2>1. Same size or larger SSD</h2>

<p>If the SSD you have installed on your machine is the same size or larger than your current mechanical drive it means that you're rich. Furthermore, the work you have to do to migrate your system to the new drive does not require too much effort. <code>ddrescue</code> is a great tool for restoring information from failing drives but it can also be used to perform bitwise clones.</p>

<p>To start migrating your system from one drive to the other, perform the following steps:</p>

<ol>
<li><p>boot your machine using the live CD / USB stick;</p></li>
<li><p>enable the "universe" repositories on Ubuntu and install <code>gddrescue</code>:</p>

<pre><code> sudo apt-get update &amp;&amp; sudo apt-get install gddrescue
</code></pre></li>
<li><p>use <code>gddrescue</code> to clone your drive:</p>

<pre><code> sudo ddrescue -v --force /dev/sda /dev/sdb
</code></pre>

<p> where <code>/dev/sda</code> is your source drive and <code>/dev/sdb</code> is your destination drive</p></li>
<li><p>have patience; depending on your disk size and your machine's performance this might take a while.</p></li>
</ol>


<p>At the end you should be able to seamlessly replace the old spinning drive with the SSD and just enjoy the snappiness of your system.</p>

<h2>2. Smaller SSD - the usual compromise</h2>

<p>Trying to clone a larger disk to a smaller one using <code>ddrescue</code> is not trivial, even if the total used storage space would be less than the SSD's storage capacity. In this case three software tools of the *nix Swiss Army knife have to be used:</p>

<ol>
<li><p><code>gparted</code> &ndash; for setting out the partitioning layout;</p></li>
<li><p><code>rsync</code> &ndash; for selectively synchronising the needed data (you can easily decide what to exclude using patterns);</p></li>
<li><p><code>boot-repair</code> &ndash; to fix your Grub2 setup.</p></li>
</ol>


<h3>Partitioning with <code>gparted</code></h3>

<p>Boot your system using your live Ubuntu image. Using <code>gparted</code> (it is included on the live image) create the desired partitions on your SSD. Currently only 2 Linux file systems properly support SSDs (making use of native TRIM): <code>btrfs</code> and <code>ext4</code>. Out of these two, only <code>ext4</code> is considered mature enough to be used on production-ready systems, due to its mass-adoption in the Linux world.</p>

<p>In order to align your partitions with the drive's sectors (for optimal performance and longevity) make sure to leave the first MiB of storage unallocated and to align your partitions to MiB, not cylinders. This is fairly intuitive with <code>gparted</code>.</p>

<p>Remember to add the <code>boot</code> flag to the partition where your <code>/boot</code> folder will be stored.</p>

<h3>Syncing with <code>rsync</code></h3>

<p>Once your SSD drive is partitioned, mount the source and destination partitions. This can easily be done from Nautilus, the default file browser from Ubuntu. Just open the home folder and on the left sidebar you can see the unmounted file systems. Click on them to let the system mount them automatically. I strongly recommend to mount them two by two (1 source, 1 destination) in order to avoid any complications. Using <code>rsync</code> selectively sync your partitions:</p>

<pre><code>    sudo rsync -a -v --exclude "excluded_folder_name_or_pattern" /media/&lt;source_uuid&gt;/ /media/&lt;destination_uuid&gt;
</code></pre>

<h3>Restoring <code>grub</code></h3>

<p>Unfortunately <code>rsync</code> will not be able to handle <code>grub</code>, thus you will not be able to boot your system. Restoring <code>grub</code> is very straight-forward. Again you will need the live CD / live USB stick to boot up your machine. After Ubuntu is up and running from the installation medium, you just need to install and use Boot-Repair. A very good guide is available <a href="https://help.ubuntu.com/community/Boot-Repair" title="Boot-Repair - Ubuntu Community Documentation">here</a>.</p>

<h2>Specific mount options for SSD</h2>

<p>Because of the way SSD drives work, some mount options need to be specified in your <code>/etc/fstab</code> file:</p>

<ul>
<li><code>discard</code> &ndash; this enables <a href="http://en.wikipedia.org/wiki/TRIM" title="TRIM explained on Wikipedia">TRIM</a>;</li>
<li><code>noatime</code> &ndash; this disables pointless writes to disk to store the last accessed time for a read file</li>
</ul>


<p>Your <code>fstab</code> file should look more or less like this:
``` bash</p>

<h1>/etc/fstab: static file system information.</h1>

<p>#</p>

<h1>Use 'blkid -o value -s UUID' to print the universally unique identifier</h1>

<h1>for a device; this may be used with UUID= as a more robust way to name</h1>

<h1>devices that works even if disks are added and removed. See fstab(5).</h1>

<p>#</p>

<h1><file system> <mount point>   <type>  <options>       <dump>  <pass></h1>

<p>proc            /proc           proc    nodev,noexec,nosuid 0       0
UUID=0765430a-83ae-4530-b1b1-a976cd72ce16 /               ext4    discard,noatime,errors=remount-ro             0 1
UUID=263bba00-32f4-4bea-966b-ab7ae1fc3e8b /home           ext4    discard,noatime,errors=remount-ro,user_xattr  0 2
```</p>

<h1>Conclusions</h1>

<p>Migrating from your slow mechanical hard drive was easy. I am pretty sure that  if you have not used a SSD drive until now you will definitely question yourself why it took you so long to switch - I know I do. Sometimes we fail to remember that the hard-disk is still the slowest component in a computing system. A SSD might be the solution to speed up your machine instead of buying the newest and coolest CPU and it's definitely cheaper as long as you can accommodate with less storage space for the drive that should store your OS and applications (and <em>maybe</em> your media workspace).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash one-liner for removing old kernel artefacts]]></title>
    <link href="http://radu.cotescu.com/bash-old-kernel-artefacts/"/>
    <updated>2011-07-29T14:13:57+03:00</updated>
    <id>http://radu.cotescu.com/bash-old-kernel-artefacts</id>
    <content type="html"><![CDATA[<p>Since now I have 4 virtual machines to administer for my dissertation project, I have to find ways to do sysadmin stuff as quickly as possible and to concentrate my efforts on software development. If you ever did a kernel update you would know that a kernel upgrade will not remove the old kernel artefacts, specifically the old headers and the Linux image. While this is a good technique for avoiding incompatibilities of some binaries with the new kernel versions, therefore allowing you to test that everything is working as expected, old kernel images occupy an important amount of space (around 256 MB / release). When your system has a limited amount of storage allocated to it, this might become a problem.</p>

<p>The process of removing the unused images requires a few keystrokes and some user input, needing a great deal of attention not to remove the currently running kernel or - in case you are extremely inattentive - all the kernel images from your system. To semi-automate this task, you can use the following Bash one-liner:</p>

<p><code>bash
sudo apt-get purge $(dpkg -l | grep "^ii" | awk '{print $2}' | egrep -e "^linux-headers-[0-9]|^linux-image-[0-9]" | egrep -v `uname -r | cut -d"-" -f1,2`)
</code></p>

<p>Run this line only after you have booted into your new kernel, otherwise you'll remove the upgrade.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install VMware Server on kernel version 2.6.38]]></title>
    <link href="http://radu.cotescu.com/vmware-server-kernel-2-6-38/"/>
    <updated>2011-05-05T12:18:56+03:00</updated>
    <id>http://radu.cotescu.com/vmware-server-kernel-2-6-38</id>
    <content type="html"><![CDATA[<h2>Notices:</h2>

<ul>
<li><p>VMware has declared VMware Server End Of Availability on January 2010 with the actual support ending on June 30th, 2011. More details can be read <a href="http://www.vmware.com/support/policies/lifecycle/general/index.html#policy_server">here</a>. Furthermore, VMware Server is not officially supported on Ubuntu releases greater than 8.04.</p></li>
<li><p>The VMware Server console plug-in won't work on Firefox versions older than 3.6 (I have found no viable solution for this problem).</p></li>
</ul>


<p>The needed instructions for the installation can be found <a href="http://radu.cotescu.com/how-to-install-vmware-server-ubuntu-fedora-opensuse/">here</a>. For comments related to the installation on machines running the 2.6.38 kernel version please post here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 64-bit and Flash videos in fullscreen]]></title>
    <link href="http://radu.cotescu.com/ubuntu-flash-videos-fullscreen/"/>
    <updated>2011-03-25T00:00:13+02:00</updated>
    <id>http://radu.cotescu.com/ubuntu-flash-videos-fullscreen</id>
    <content type="html"><![CDATA[<p>I have never been an Adobe fan and something tells me that I won't change my mind soon. One of the main reasons for which Linux had problems being a "normal" operating system for a quite long period of time (although there were other issues as well, but not as visible at this one) was that the Flash Player never really worked very well on this platform. Time passed and things began slowly to advance, however users of the 64-bit version of the Linux kernel had to use various hacks to run a 32-bit browser because of Flash.</p>

<h2>A little bit of history (and personal experience)</h2>

<p>Only when it reached version 10 Adobe managed to issue a native 64-bit version of their Flash plug-in for Linux, but it was a Labs attempt and therefore not considered a stable release. Still, it was the best way to enjoy Flash content on a 64-bit platform, even though there wasn't a nice and easy way to install it (get an archive from Adobe, extract the <code>.so</code> file from it, and then using <code>sudo</code> move it to the proper location using the terminal). Nevertheless, everything worked smoothly, even 1080p videos in full screen, as long as you had a decent machine. Yeah, Flash is power hungry (not quite news...).</p>

<p>It didn't last long until Adobe found out that version 10.0 had a major security bug, which led to the release of version 10.1. But because Linux users were (and probably still are) a negligible quantity, version 10.1 didn't contain a 64-bit release for this platform. The "official" reasons were that Adobe wanted to work on version 10.2 which unified several technologies and therefore did not have to time to work on a Linux release. And then again, in order to avoid the security bugs, Linux users had to use the 32-bit Flash player wrapped with 32-bit compatible libraries on their 64-bit systems. And hell broke loose ever since because running Flash videos in fullscreen was a matter of luck, randomness and Adobe's willingness to test video cards drivers.</p>

<p>Although <a href="http://radu.cotescu.com/geeks-and-their-computers/">Riker</a> has pretty powerful hardware components, a Flash video in fullscreen made it look ridiculous. Flash 10.2 (this time a native 64-bit release) didn't seem to handle the problem better. Annoyed by such a trivial thing, I have started to look for a fix. It was weird that things were working with 10.0 and then degraded with newer releases. I know that my video driver hasn't been updated since then, which clearly meant that the problem was on Adobe's side.</p>

<h2>The fix</h2>

<p>Apparently, on UNIX (and consequently Linux) machines, the Flash player can read settings from two files:</p>

<ul>
<li><p><code>mm.cfg</code> - a file residing in each user's home directory with per user settings</p></li>
<li><p><code>mms.cfg</code> - a file residing in <code>/etc/adobe</code> which sets things for the whole machine</p></li>
</ul>


<p>Because Flash uses its own mechanism to check for video card compatibility and then runs animations according to it, on some drivers it might fail to read properly the OpenGL specs of the card, which in turn leads to crappy performance in fullscreen (lags, unresponsiveness, browser crashes, etc.). To override the internal compatibility check (which Adobe says that might lead to crashes; ironic, isn't it?!), one has to add a setting in the mms.cfg file:</p>

<p><code>bash
OverrideGPUValidation=true
</code></p>

<p>Once this is done, simply restart your browser and check how things are working. You might have a nice surprise. It's amazing though how until 10.1 things were working as they should have without this override.</p>

<p>If by any chance that file, or even the <code>adobe</code> folder, is missing, use these commands:</p>

<p><code>bash
sudo mkdir /etc/adobe #in case the folder is missing
echo "OverrideGPUValidation=true" | sudo tee /etc/adobe/mms.cfg
</code></p>

<p>Let's hope though that 10.3 won't require something more esoteric.</p>

<p>Source: <a href="http://blogs.adobe.com/penguinswf/2008/08/secrets_of_the_mmscfg_file_1.html">Secrets of The mms.cfg File</a></p>
]]></content>
  </entry>
  
</feed>
