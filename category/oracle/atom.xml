<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oracle | Radu Cotescu's professional blog]]></title>
  <link href="http://radu.cotescu.com/category/oracle/atom.xml" rel="self"/>
  <link href="http://radu.cotescu.com/"/>
  <updated>2014-01-05T00:57:00+02:00</updated>
  <id>http://radu.cotescu.com/</id>
  <author>
    <name><![CDATA[Radu Cotescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oracle TopLink, the ORA-00900 error and stored procedures]]></title>
    <link href="http://radu.cotescu.com/oracle-toplink-stored-procedures/"/>
    <updated>2010-05-31T12:11:29+03:00</updated>
    <id>http://radu.cotescu.com/oracle-toplink-stored-procedures</id>
    <content type="html"><![CDATA[<p>I was introduced to Oracle's TopLink <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> package during my second internship at Oracle. Although the API (because TopLink actually became the reference implementation for the <a href="http://en.wikipedia.org/wiki/Java_Persistence_API">JPA</a> 2.0) seemed a bit overwhelming at first, I've managed to get a grasp of it quite fast, allowing me to finish the assigned projects in time. The familiarity with the API and with Toplink Workbench, a graphical tool designed to help you map database tables into Java classes (basically JavaBeans), made me use this combination for my diploma project (which I've been talking about more or less on my previous posts).</p>

<p>Working on a parser that would extract objects out of some very large text files (about 1.8 million lines) and would then persist them into a DB, I was required to eliminate duplicates. I had two options:</p>

<ol>
<li><p>parse the file, create an object, verify if the object was persisted by doing a SELECT query in the DB after its attributes (actually TopLink handled this part) and if the result was null persist the new object;</p></li>
<li><p>parse the file, create objects, persist them, eliminate duplicates after all objects have been parsed using a <em>stored procedure.</em></p></li>
</ol>


<p>While method 1 uses only the sequence values needed for the operation (I'm using sequences for my primary keys), for each INSERT a SELECT has to be made before, which would induce a performance fault. Method 2 on the other hand uses more sequence values than the first one by inserting more rows than actually needed, but even with this issue in mind it turned out to work faster. So there you go, we have a winner.</p>

<p>Using <em>stored procedures</em> has some advantages and as well some disadvantages. The advantages are that nothing is quicker than native database code and this option allows you to write complex operations using a simple implementation language (SQL, PL/SQL) which would be quite hard to write using programming languages. The disadvantages come in the application layer, because these stored procedures aren't portable: if you change your database engine, let's say from MySQL to Oracle, chances are that 99.5% you must rewrite those procedures.</p>

<p>In my case the stored procedure doesn't return any rows, it actually deletes duplicates:</p>

<p>``` sql
CREATE OR REPLACE
PROCEDURE procedure_name AS
BEGIN
  DELETE FROM table_name a WHERE a.id > (
  SELECT MIN(b.id)
  FROM table_name b
  WHERE</p>

<pre><code>b.field1 = a.field1 AND
b.field2 = a.field2 AND
b.field3 = a.field3
</code></pre>

<p>  );
END procedure_name;
```</p>

<p>The Java code used for calling this procedure is simple:</p>

<p>``` java
public static void deleteDuplicates() {</p>

<pre><code>Session session = ToplinkSession.getToplinkSession();
DataModifyQuery dmq = new DataModifyQuery();
StoredProcedureCall spc = new StoredProcedureCall();
spc.setProcedureName("procedure_name");
dmq.setCall(spc);
session.executeQuery(dmq);
</code></pre>

<p>}
```</p>

<p>where ToplinkSession is a singleton class with a static method for returning a <code>Session</code> (or <code>DatabaseSession</code>) object. Note the highlighted line: if you would use a <code>ReadAllQuery</code> instead of <code>DataModifyQuery</code> you'd get a <code>java.sql.SQLException</code> nested in an <code>oracle.toplink.DatabaseException</code> together with an <strong>ORA-00900</strong> error message, even if the generated SQL doesn't contain errors. This is because the <code>ReadAllQuery</code> expects data to return, while the other doesn't. So the correct way of calling stored procedures that don't return data is with the help of <code>DataModifyQuery</code>.</p>

<p>I hope that by having all this cleared out you won't deal with this error any more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install Oracle Database 10g XE and OC4J on Ubuntu]]></title>
    <link href="http://radu.cotescu.com/oracle-database-10g-xe-oc4j-ubuntu/"/>
    <updated>2009-12-17T22:58:17+02:00</updated>
    <id>http://radu.cotescu.com/oracle-database-10g-xe-oc4j-ubuntu</id>
    <content type="html"><![CDATA[<p>Starting to work on my diploma project my setup required that I installed Oracle 10g XE and OC4J. For a while now Oracle has started to offer <code>*.deb</code> packages and to host a repository for Debian-based Linux distributions, which means that they have gained the maturity to be used in enterprise environments.</p>

<p>The installation of both servers is painless, unless you want them on the same machine (which actually should be avoided unless you have powerful hardware). But if that's the only way to have them, you must avoid setting the <code>ORACLE_HOME</code> environment variable required by OC4J because it will mess with the scripts used to start / stop the DB server. Instead create the <code>ORACLE_HOME</code> variable only inside the <code>bin/oc4j</code> script inside OC4J's installation folder.</p>

<p>Keeping that as an important side note, to install those two servers follow these steps:</p>

<ol>
<li><p>Oracle Database 10g Express Edition</p>

<ul>
<li><p>add Oracle's repository to your <code>/etc/apt/sources.list</code> file</p>

<pre><code>  echo -e "\n# Oracle repository\ndeb http://oss.oracle.com/debian unstable main non-free | sudo tee -a /etc/apt/sources.list
</code></pre></li>
<li><p>get the key for the repository</p>

<pre><code>  echo -e "\n# Oracle repository\ndeb http://oss.oracle.com/debian unstable main non-free | sudo tee -a /etc/apt/sources.list
</code></pre></li>
<li><p>update your packages information</p>

<pre><code>  sudo apt-get update
</code></pre></li>
<li><p>install the database (I recommend using the universal package so that you get Unicode character support)</p>

<pre><code>  sudo apt-get install oracle-xe-universal
</code></pre></li>
<li><p>configure the DB instance</p>

<pre><code>  sudo /etc/init.d/oracle-xe configure
</code></pre></li>
<li><p>to administer the DB either use the menu entries from <em>Applications - Oracle Database 10g Express Edition</em>, either use the scripts from <code>/usr/lib/oracle/xe/app/oracle/product/10.2.0/server/config/scripts/</code></p>

<pre><code>  sudo adduser your_user dba
</code></pre></li>
</ul>
</li>
<li><p>OC4J</p>

<ul>
<li>download one of the OC4J containers from <a href="http://www.oracle.com/technology/software/products/ias/htdocs/utilsoft.html">here</a></li>
<li>extract the archive where you want to have the server installed (let's call this <code>OC4J_HOME</code>)</li>
<li><p>change the file permissions for <code>$OC4J_HOME/bin/oc4j</code> to 744</p>

<pre><code>  chmod 744 $OC4J_HOME/bin/oc4j
</code></pre></li>
<li><p>edit the script located at <code>$OC4J_HOME/bin/oc4j</code> so that right after the configuration section you have something like:</p>

<pre><code>  #########################################################
  ########## START CONFIGURATION SECTION ##################
  #########################################################

  ORACLE_HOME=OC4J_HOME
  J2EE_HOME=$ORACLE_HOME/j2ee/home
</code></pre></li>
</ul>


<p> but replace <code>OC4J_HOME</code> with the actual folder path</p>

<ul>
<li>start the server and add the credentials for the <code>oc4jadmin</code> user</li>
</ul>
</li>
</ol>


<p>If you used the default ports for both installations, you can access the OC4J EM at <a href="http://127.0.0.1:8888/em">http://127.0.0.1:8888/em</a> and the DB at <a href="http://127.0.0.1:8080/apex">http://127.0.0.1:8080/apex</a> (note that <a href="http://radu.cotescu.com/how-to-install-oracle-application-express-312-on-oracle-database-10g-xe/">APEX</a> is not installed).</p>

<p>Start developing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install Oracle Application Express 3.1.2 on Oracle Database 10g XE]]></title>
    <link href="http://radu.cotescu.com/how-to-install-oracle-application-express-312-on-oracle-database-10g-xe/"/>
    <updated>2009-05-24T18:16:52+03:00</updated>
    <id>http://radu.cotescu.com/how-to-install-oracle-application-express-312-on-oracle-database-10g-xe</id>
    <content type="html"><![CDATA[<p>Before upgrading to Oracle APEX 3.1.2 from the Oracle APEX 2.1 that comes with Oracle Database 10g XE you should carefully read <a href="http://www.oracle.com/technology/products/database/application_express/html/3.1_and_xe.html">this page</a> to know all the facts that you might loose and win. After that follow the next guide. The Oracle's one has a minor problem.</p>

<ol>
<li><p>Download APEX from <a href="http://www.oracle.com/technology/products/database/application_express/download.html">here</a>.</p></li>
<li><p>Unzip it to a convenient directory (/opt on a Linux machine or C:\oraclexe\apex on a Windows machine)</p></li>
<li><p>Start an SQL*Plus session from that directory</p>

<pre><code> sqlplus / as sysdba
</code></pre></li>
<li><p>Install APEX:</p>

<pre><code> @apexins SYSAUX SYSAUX TEMP /i/
</code></pre></li>
<li><p>Reconnect to your database.</p></li>
<li><p>Set the images PATH for APEX (APEX_HOME is the folder where you have unzipped APEX; e.g.: /opt, C:\oraclexe)</p>

<pre><code> @apxldimg.sql APEX_HOME
</code></pre></li>
<li><p>Set the Administrator password for APEX:</p>

<pre><code> @apxxepwd.sql secret
</code></pre></li>
<li><p>Restart your XE instance.</p></li>
<li><p>Your new APEX is available at <a href="http://localhost:port/apex">http://localhost:port/apex</a> or for administration purposes at <a href="http://localhost:port/apex/apex_admin">http://localhost:port/apex/apex_admin</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
