<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Radu Cotescu's professional blog]]></title>
  <link href="http://radu.cotescu.com/category/java/atom.xml" rel="self"/>
  <link href="http://radu.cotescu.com/"/>
  <updated>2014-10-07T02:22:27+03:00</updated>
  <id>http://radu.cotescu.com/</id>
  <author>
    <name><![CDATA[Radu Cotescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A useful rant on how people write Java code]]></title>
    <link href="http://radu.cotescu.com/java-common-sense/"/>
    <updated>2012-10-21T20:49:00+03:00</updated>
    <id>http://radu.cotescu.com/java-common-sense</id>
    <content type="html"><![CDATA[<p>During the last months I've had the chance to see a lot of code written by different types of developers. Some of it has definitely made me
proud of the word "engineering" being associated with my profession; the other, not. There are a few basic unwritten rules that more or less
have become software engineering common sense.</p>

<!-- more -->


<h3>Input handling</h3>

<p>99.9% of the code written on this planet deals in some way or the other with user input. <em>The User</em> is not necessary a good person. A paranoid
engineer (all engineers should be paranoid; if you're an engineer but don't feel paranoid just quit your job!) would actually say that <em>The
User</em> is a terrible person whose only role is to create problems that the engineer has to solve. Since <em>The User</em> is such a terrible person
nothing coming from them should be trusted. This is why everything that doesn't come from a safe source (are there any safe sources for data
input?!) must be validated.</p>

<p>For example:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What would happen on line 3 if <em>The User</em> submitted null for the <code>input</code> string? That's right. The assumption that your user is a nice person
just earned you a <code>NullPointerException</code>. Now assume that your unvalidated code was delivered as part of some bigger project which accidentally
calls your wonderful method. Oh yeah, the <code>NPE</code> now hogs in their code...</p>

<p>This could have easily been avoided by:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, if the logic in your method is not as simple as that, always inform the caller of the consequences of calling your code with invalid
parameters - whether you explicitly throw an <code>Exception</code> (which is <em>documented</em>), or you just provide a default return value.</p>

<h3>Useful logging</h3>

<p>Every engineer should use a logging mechanism through which meaningful and important information is... Well, logged. Probably the most useful
information is the one which is logged in the case of an error. Assuming your logger supports a <code>Throwable</code> object as a parameter in its
<code>error</code> method, <strong>never ever</strong> do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// code that throws a random exception</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Bla bla bla&quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's not gonna help anyone. Moreover it's going to annoy the person who encounters the error because they won't know the exact cause.
<strong>Always</strong> log your errors like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Meaningful error message&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Java is not <strike>C++</strike> C89/ANSI C</h3>

<p>Seriously! Repeat after me: <em>"Java is not <strike>C++</strike> C89/ANSI C!"</em> You don't need to declare your loop variable outside of the loop, like you used to do back in the old C. Nor do you have to declare
and initialise a variable at the beginning of a method and then change its value on the next line. What's the point?!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// int i = 0; BAD!</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">GOOD</span><span class="o">!</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//do something here</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// hilarious</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="s">&quot;random_not_null_string&quot;</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">else</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Learn how to correctly concatenate Strings</h3>

<p>Strings are immutable! Stop concatenating more than two of them with <code>+</code> if they are not constants. Every time you use <code>+</code> for something like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// assume we&#39;re in a loop</span>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot; bla bla &quot;</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="s">&quot; bla bla&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>a kitten dies in terrible pain. Not only that your code is slow, it's also occupying more memory than it should. Use one of the convenient classes
for building strings, like <code>StringBuilder</code> or <code>StringBuffer</code>, the latter one being thread safe.</p>

<h3>In case you need to write JSON</h3>

<p>Don't! Seriously. Just don't. And not because I don't like JSON, but because you're probably going to do something wrong. Always use a class that
can write JSON for you. Yes, it's another dependency to your project. However the chances are that it's been tested by more developers than just one.
Code is one of those things where "the more, the merrier" expression just fits in without sounding awkward. Whether you use
<a href="http://code.google.com/p/json-simple/" title="Json.simple">Json.simple</a> or <a href="http://code.google.com/p/google-gson/" title="Gson">Gson</a>, it's up to you.</p>

<h2>As a conclusion</h2>

<p>Don't be ashamed to ask for a code review from one of your colleagues. Nobody's perfect, but the code you deliver should work no matter what data it's
fed through it. Write your application as if you're building a tank. Make it handle abuse and misuse. And don't forget to be paranoid. It helps.</p>

<p>(Many thanks to fellow Redditers who provided me with valuable feedback for two things that I haven't double checked: the String concatenation example
didn't specify that <code>+</code> should be avoided in loops, although that was the intended case; the C++ standard allows variable declarations anywhere.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java, HTTPS and REST web services using Apache CXF]]></title>
    <link href="http://radu.cotescu.com/java-https-rest-services-apache-cxf/"/>
    <updated>2010-12-16T23:39:23+02:00</updated>
    <id>http://radu.cotescu.com/java-https-rest-services-apache-cxf</id>
    <content type="html"><![CDATA[<p><strong>Securing REST web services</strong> is a very debated topic on the Internet. Because REST represents an architecture, and not a protocol - like SOAP -, there aren't any specifications dealing with security, leaving this aspect as a design decision for the software engineers / developers. Still, if you search the web to find out what are the approaches, you'll see that most of the results suggest you use <strong><a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic authentication</a> over <a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS</a></strong>.</p>

<p>The basic authentication is a trivial way of authenticating HTTP requests directly by the web server, without any added effort for the developer. Since REST isn't very pretentious (it uses the well known HTTP methods for accessing resources), leaving the authentication to the web server is a natural thing to do. Still, this doesn't mean that your REST API is secure. You merely separate users that should have access to your API from users that should be denied access. Enabling HTTPS on the server is the next step that needs to be followed, so that all the requests are secured. This avoids the classical man-in-the-middle attack and also assures that the credentials sent by the users aren't visible to the whole world (although they are BASE64 encoded by the basic authentication mechanism, decoding them is a child's play).</p>

<h2>A practical example</h2>

<p>For the next paragraphs, I will be very specific (the title should have already told you this). To add something more, let's assume you use <strong>Maven</strong> (because you're a real developer) and <strong>Jetty</strong> (only for testing - I assume that for production you use a proper server, like Tomcat). Enabling HTTPS on any other server shouldn't be much different.</p>

<h3><code>pom.xml</code></h3>

<p>To enable HTTPS and basic user authentication on Jetty by using Maven, you would have to use an additional plug-in for generating keystores, unless you already have a keystore that you would like to use, in which case you should not keep it in the <code>target</code> folder of your project. The following section of <code>pom.xml</code> should do the trick:</p>

<p>``` xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
&lt;artifactId&gt;keytool-maven-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;clean&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;clean&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;genkey&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;genkey&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
    &lt;dname&gt;cn=server_host_name&lt;/dname&gt;
    &lt;keypass&gt;jetty6&lt;/keypass&gt;
    &lt;storepass&gt;jetty6&lt;/storepass&gt;
    &lt;alias&gt;jetty6&lt;/alias&gt;
    &lt;keyalg&gt;RSA&lt;/keyalg&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin></p>

<pre><code>&lt;!-- Jetty support for testing --&gt;
</code></pre>

<p><plugin></p>

<pre><code>&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;start-jetty&lt;/id&gt;
        &lt;phase&gt;pre-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;run&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
            &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
            &lt;daemon&gt;true&lt;/daemon&gt;
        &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;id&gt;stop-jetty&lt;/id&gt;
        &lt;phase&gt;post-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;stop&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
    &lt;stopPort&gt;9999&lt;/stopPort&gt;
    &lt;scanIntervalSeconds&gt;2&lt;/scanIntervalSeconds&gt;
    &lt;contextPath&gt;/restws&lt;/contextPath&gt;
    &lt;userRealms&gt;
        &lt;userRealm implementation="org.mortbay.jetty.security.HashUserRealm"&gt;
            &lt;name&gt;name_of_realm&lt;/name&gt;
            &lt;config&gt;src/main/resources/sec.properties&lt;/config&gt;
        &lt;/userRealm&gt;
    &lt;/userRealms&gt;
    &lt;connectors&gt;
        &lt;connector implementation="org.mortbay.jetty.nio.SelectChannelConnector"&gt;
            &lt;port&gt;8080&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
        &lt;/connector&gt;
        &lt;connector implementation="org.mortbay.jetty.security.SslSocketConnector"&gt;
            &lt;port&gt;8443&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
            &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
            &lt;password&gt;jetty6&lt;/password&gt;
            &lt;keyPassword&gt;jetty6&lt;/keyPassword&gt;
        &lt;/connector&gt;
    &lt;/connectors&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>The highlighted lines indicate the user <strong>realm</strong>. This is a file which describes to the server who are your users and what roles are they assigned. The specified file contains records of this form:</p>

<p><code>
user: password,role
</code></p>

<h3><code>web.xml</code></h3>

<p>Now you must configure your web application to accept HTTPS encrypted content. This is done in the <strong>web.xml</strong> file, by adding the following lines of code:</p>

<p>``` xml
<security-constraint></p>

<pre><code>&lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;application_name&lt;/web-resource-name&gt;
&lt;!-- all URLs are protected --&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
    &lt;role-name&gt;user&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;user-data-constraint&gt;
    &lt;!-- redirect all requests to HTTPS --&gt;
    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
&lt;/user-data-constraint&gt;
</code></pre>

<p></security-constraint>
<login-config></p>

<pre><code>&lt;auth-method&gt;BASIC&lt;/auth-method&gt;
&lt;realm-name&gt;name_of_realm&lt;/realm-name&gt;
</code></pre>

<p></login-config>
```</p>

<h3>REST web services and Apache CXF</h3>

<p>So, everything is set up and working. Well, almost. If your REST web services also include some client code, you might encounter an exception with the following message:</p>

<p><code>java
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
</code></p>

<p>The exception is thrown because the certificate your server uses is not from a known <strong>Certificate Authority</strong>. If you have studied the POM example, you'd see that the certificate is generated at every execution of the <code>install</code> goal. Moreover, the certificate is self-signed. From here we have two solutions:</p>

<ol>
<li><p>try to create a single key store and save it in the <code>src</code> folder, configuring the server to use the file from this location; then start the server and use the program written by Andreas Sterbenz which you can find <a href="http://blogs.sun.com/andreas/entry/no_more_unable_to_find">here</a>; grab the certificate and move the resulted file into the security folder of your JRE (on Linux this should be <code>/usr/lib/jvm/java-6-sun/jre/lib/security/</code>); although this will work okay on your machine, if your project should be accessed by multiple developers, each member of the team has to add that certificate to his/hers JVM (which is not quite nice);</p></li>
<li><p>create an<strong> alternative <code>TrustStore</code></strong> used only by your application; this is by far the most elegant solution, which adds some more code to the application but doesn't force your team members to add dummy certificates to their JVM.</p></li>
</ol>


<h4>Implementing the <code>TrustStore</code></h4>

<p>The class implementing the <code>X509TrustManager</code> is trivial:</p>

<p>``` java
public class FakeTrustManager implements javax.net.ssl.X509TrustManager {</p>

<pre><code>public java.security.cert.X509Certificate[] getAcceptedIssuers() {
    return null;
}
public void checkClientTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
public void checkServerTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
</code></pre>

<p>}
```</p>

<p>To make all your <strong>Apache CXF REST</strong> <strong>clients</strong> use the new trust store, it is necessary to create a static method in an utility class that sets everything up for the clients:</p>

<p>``` java
public static void setClientAuthentication(Object client) {</p>

<pre><code>Properties p = PropertiesLoader
        .getPropertiesFromFile("config.properties");
ClientConfiguration config = WebClient.getConfig(client);
HTTPConduit httpConduit = (HTTPConduit) config.getConduit();
if (p.getProperty("user.name") != null
        &amp;&amp; p.getProperty("user.password") != null) {
    AuthorizationPolicy authorization = new AuthorizationPolicy();
    authorization.setUserName(p.getProperty("user.name"));
    authorization.setPassword(p.getProperty("user.password"));
    httpConduit.setAuthorization(authorization);
}
TLSClientParameters tlsParams = new TLSClientParameters();
TrustManager[] trustAllCerts = new TrustManager[] { new FakeTrustManager() };
tlsParams.setTrustManagers(trustAllCerts);
// disables verification of the common name (the host for which the certificate has been issued)
tlsParams.setDisableCNCheck(true);
httpConduit.setTlsClientParameters(tlsParams);
</code></pre>

<p>}
```</p>

<p>The properties file you see loaded in the previous code output contains the username and password for authentication, but it's different from the realm. This is because the realm would be harder to parse, although the information is still plain text. Although it might seem redundant to have the username and password in two files, the realm can actually hold users belonging to different roles - therefore the parsing effort.</p>

<p>The <code>PropertiesLoader</code> class is not standard, but again it's something trivial:</p>

<p>``` java
import java.net.URL;
import java.util.Properties;
public class PropertiesLoader {</p>

<pre><code>public static Properties getPropertiesFromFile(String propertiesFile) {
    Properties p = new Properties();
    ClassLoader loader = PropertiesLoader.class.getClassLoader();
    if (loader == null) {
        loader = ClassLoader.getSystemClassLoader();
    }
    URL url = loader.getResource(propertiesFile);
    try {
        p.load(url.openStream());
    } catch (Exception e) {
        System.err.println("Could not load configuration file: "
                + propertiesFile);
    }
    return p;
}
</code></pre>

<p>}
```</p>

<p>Having done all this, your clients should now work as expected. Just remember that the <code>FakeTrustStore</code> is to be used <em>only</em> for testing purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using two JVMs in Ubuntu]]></title>
    <link href="http://radu.cotescu.com/using-two-jvm-in-ubuntu/"/>
    <updated>2010-10-19T22:15:49+03:00</updated>
    <id>http://radu.cotescu.com/using-two-jvm-in-ubuntu</id>
    <content type="html"><![CDATA[<p>Today I was faced with the challenge of using two JVMs on the same machine. And let me tell you that whenever you have to do this, things get dirty. Basically I was forced to install an additional 32-bit JVM for <a href="http://www.event-b.org/platform.html">Rodin</a>, the IDE we use at faculty for Event-B modelling, because the developers of the platform (which is actually a modified Eclipse) decided not to support the 64-bit architectures (LAME!).</p>

<p>Installing a 32-bit JVM on a machine that already has a 64-bit JVM installed will change the default JVM to be the last one installed. Since all of my Java programs and application were made for 64-bit, it was a mayhem on my machine. The solution is rather simple (but, oh, so uncomfortable). You would have to change the default JVM back to the 64-bit one and build some wrapper scripts for all the 32-bit apps to use the correct JVM for them.</p>

<p>Changing the defaults is done in this way:</p>

<p><code>bash
sudo update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/java-6-sun/bin/java" 1
sudo update-alternatives --set java /usr/lib/jvm/java-6-sun/bin/java
</code></p>

<p>The first line will instruct your system that there's another Java version available (the old one) while the second line will make it the default version of JVM.</p>

<p>For Rodin, the wrapper script is pretty trivial, since it's nothing more than a modified Eclipse IDE:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>WHERE=<code>dirname $0</code>
$WHERE/rodin -vm /usr/lib/jvm/ia32-java-6-sun/bin/java
```</p>

<p>Everything should be working okay now but don't forget to instruct the 32-bit apps to use their dedicated JVM. Anyway, keep in mind that this is an ugly hack. If you're a developer you should better package your apps for all the available architectures and not force your user-base to do this kind of hacks. Don't forget though that this happens only when some system dependent libraries are used (as is the case for Rodin).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 4-Ever]]></title>
    <link href="http://radu.cotescu.com/java-4-ever/"/>
    <updated>2010-06-25T20:22:06+03:00</updated>
    <id>http://radu.cotescu.com/java-4-ever</id>
    <content type="html"><![CDATA[<p>I have just seen the funniest and geekiest online video ever (via a buddy who sent me the link from the original site). Forget about Intel's last advertising campaigns. Carefully watch the following one.</p>

<p>DISCLAIMER: You must have some basic knowledge about Java, .NET, Microsoft, Linux and open-source. Otherwise you might fail to get the jokes.</p>

<p><a href="http://www.youtube.com/watch?v=yl1f1-Da0OI"><img src="/uploads/wpuploads/2010/06/0.jpg" alt="Java 4-Ever" /></a></p>

<p>More details are available <a href="http://jz10.java.no/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle TopLink, the ORA-00900 error and stored procedures]]></title>
    <link href="http://radu.cotescu.com/oracle-toplink-stored-procedures/"/>
    <updated>2010-05-31T12:11:29+03:00</updated>
    <id>http://radu.cotescu.com/oracle-toplink-stored-procedures</id>
    <content type="html"><![CDATA[<p>I was introduced to Oracle's TopLink <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> package during my second internship at Oracle. Although the API (because TopLink actually became the reference implementation for the <a href="http://en.wikipedia.org/wiki/Java_Persistence_API">JPA</a> 2.0) seemed a bit overwhelming at first, I've managed to get a grasp of it quite fast, allowing me to finish the assigned projects in time. The familiarity with the API and with Toplink Workbench, a graphical tool designed to help you map database tables into Java classes (basically JavaBeans), made me use this combination for my diploma project (which I've been talking about more or less on my previous posts).</p>

<p>Working on a parser that would extract objects out of some very large text files (about 1.8 million lines) and would then persist them into a DB, I was required to eliminate duplicates. I had two options:</p>

<ol>
<li><p>parse the file, create an object, verify if the object was persisted by doing a SELECT query in the DB after its attributes (actually TopLink handled this part) and if the result was null persist the new object;</p></li>
<li><p>parse the file, create objects, persist them, eliminate duplicates after all objects have been parsed using a <em>stored procedure.</em></p></li>
</ol>


<p>While method 1 uses only the sequence values needed for the operation (I'm using sequences for my primary keys), for each INSERT a SELECT has to be made before, which would induce a performance fault. Method 2 on the other hand uses more sequence values than the first one by inserting more rows than actually needed, but even with this issue in mind it turned out to work faster. So there you go, we have a winner.</p>

<p>Using <em>stored procedures</em> has some advantages and as well some disadvantages. The advantages are that nothing is quicker than native database code and this option allows you to write complex operations using a simple implementation language (SQL, PL/SQL) which would be quite hard to write using programming languages. The disadvantages come in the application layer, because these stored procedures aren't portable: if you change your database engine, let's say from MySQL to Oracle, chances are that 99.5% you must rewrite those procedures.</p>

<p>In my case the stored procedure doesn't return any rows, it actually deletes duplicates:</p>

<p>``` sql
CREATE OR REPLACE
PROCEDURE procedure_name AS
BEGIN
  DELETE FROM table_name a WHERE a.id > (
  SELECT MIN(b.id)
  FROM table_name b
  WHERE</p>

<pre><code>b.field1 = a.field1 AND
b.field2 = a.field2 AND
b.field3 = a.field3
</code></pre>

<p>  );
END procedure_name;
```</p>

<p>The Java code used for calling this procedure is simple:</p>

<p>``` java
public static void deleteDuplicates() {</p>

<pre><code>Session session = ToplinkSession.getToplinkSession();
DataModifyQuery dmq = new DataModifyQuery();
StoredProcedureCall spc = new StoredProcedureCall();
spc.setProcedureName("procedure_name");
dmq.setCall(spc);
session.executeQuery(dmq);
</code></pre>

<p>}
```</p>

<p>where ToplinkSession is a singleton class with a static method for returning a <code>Session</code> (or <code>DatabaseSession</code>) object. Note the highlighted line: if you would use a <code>ReadAllQuery</code> instead of <code>DataModifyQuery</code> you'd get a <code>java.sql.SQLException</code> nested in an <code>oracle.toplink.DatabaseException</code> together with an <strong>ORA-00900</strong> error message, even if the generated SQL doesn't contain errors. This is because the <code>ReadAllQuery</code> expects data to return, while the other doesn't. So the correct way of calling stored procedures that don't return data is with the help of <code>DataModifyQuery</code>.</p>

<p>I hope that by having all this cleared out you won't deal with this error any more.</p>
]]></content>
  </entry>
  
</feed>
