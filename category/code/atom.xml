<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Radu Cotescu's professional blog]]></title>
  <link href="http://radu.cotescu.com/category/code/atom.xml" rel="self"/>
  <link href="http://radu.cotescu.com/"/>
  <updated>2014-01-30T16:40:55+02:00</updated>
  <id>http://radu.cotescu.com/</id>
  <author>
    <name><![CDATA[Radu Cotescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coloured log outputs on Unix/Linux]]></title>
    <link href="http://radu.cotescu.com/coloured-log-outputs/"/>
    <updated>2012-10-29T21:36:00+02:00</updated>
    <id>http://radu.cotescu.com/coloured-log-outputs</id>
    <content type="html"><![CDATA[<p>There are various times when a software engineer needs to closely monitor log output in real-time. More often than not the engineer is
actually interested in the output of multiple logs at the same time. Given the amount of information that an application can output to log
files at any one time, filtering the important information from bogus entries becomes frustrating and tedious.</p>

<p>One of the solutions I've come across recently is to colorize the log output according to the log entries' severity.</p>

<!--more-->


<h2>GUI half-baked options</h2>

<p>On GNOME-based Linux distributions there's <em>GNOME System Log Viewer</em>, a GUI application that can be used to monitor logs in real-time.
One nice functionality that it provides are filters which can be configured to match an expression or a regular expression; the filters
allow colorizing the output according to what they match. +1 for Linux.</p>

<p>On Mac OS X <em>Console.app</em>, although is able to filter information faster and easier than <em>GNOME System Log Viewer</em>, is not able to highlight
the lines of interest using colours. Which is a shame, given the fact that more and more developers are migrating to Macs.</p>

<h2><code>tail</code> and the power of Bash</h2>

<p>Every Unix/Linux user has used <a href="http://linux.die.net/man/1/tail" title="tail's man page"><code>tail</code></a> at least once (though I have my doubts regarding
some of the Mac users :P). The advantage of <code>tail</code> is that it allows piping its output to whatever program able to consume information from
<code>stdin</code>.</p>

<h3>Enter <code>awk</code></h3>

<p><a href="http://en.wikipedia.org/wiki/Awk" title="AWK on Wikipedia"><code>awk</code></a> is an interpreted programming language perfect for extracting data from text
files. Given the fact that <code>awk</code> can read from <code>stdin</code>, it's quite trivial to pipe data to it from which to extract more meaningful
information. Combine this with a little Bash scripting (needs Bash 4 due to associative arrays) and we have a nice and easy way to analyze
logs in real-time using colour-coded output.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ctail with awk</span><a href='https://github.com/raducotescu/ctail'>Clone on GitHub </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/usr/local/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;TAIL<span class="o">=</span>&lt;code&gt;which tail&lt;/code&gt;
</span><span class='line'><span class="nv">AWK</span><span class="o">=</span>&lt;code&gt;which awk&lt;/code&gt;
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$TAIL</span> <span class="o">]]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo -e <span class="s2">&quot;Cannot find tail executable.\n&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="nv">$AWK</span> <span class="o">]]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo -e <span class="s2">&quot;Cannot find awk executable.\n&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CWD<span class="o">=</span>&lt;code&gt;dirname <span class="nv">$0</span>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;declare -A log
</span><span class='line'>log<span class="o">[</span><span class="s2">&quot;INFO&quot;</span><span class="o">]=</span><span class="s2">&quot;BWhite&quot;</span>
</span><span class='line'>log<span class="o">[</span><span class="s2">&quot;ERROR&quot;</span><span class="o">]=</span><span class="s2">&quot;BRed&quot;</span>
</span><span class='line'>log<span class="o">[</span><span class="s2">&quot;WARN&quot;</span><span class="o">]=</span><span class="s2">&quot;BYellow&quot;</span>
</span><span class='line'>log<span class="o">[</span><span class="s2">&quot;DEBUG&quot;</span><span class="o">]=</span><span class="s2">&quot;BGreen&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> -f <span class="s2">&quot;$CWD/ctail.config&quot;</span> <span class="o">]]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;source <span class="s2">&quot;$CWD/ctail.config&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;declare -A colours&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Regular&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;colours<span class="o">[</span><span class="s2">&quot;Black&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;30m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Red&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;31m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Green&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;32m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Yellow&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;33m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Blue&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;34m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Purple&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;35m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;Cyan&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;36m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;White&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;37m&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Bold&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;colours<span class="o">[</span><span class="s2">&quot;BBlack&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;30m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BRed&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;31m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BGreen&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;32m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BYellow&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;33m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BBlue&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;34m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BPurple&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;35m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BCyan&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;36m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BWhite&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;37m&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;High Intensity&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;colours<span class="o">[</span><span class="s2">&quot;IBlack&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;90m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IRed&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;91m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IGreen&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;92m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IYellow&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;93m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IBlue&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;94m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IPurple&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;95m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;ICyan&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;96m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;IWhite&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[0;97m&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Bold High Intensity&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;colours<span class="o">[</span><span class="s2">&quot;BIBlack&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;90m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIRed&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;91m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIGreen&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;92m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIYellow&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;93m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIBlue&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;94m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIPurple&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;95m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BICyan&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;96m&quot;</span>
</span><span class='line'>colours<span class="o">[</span><span class="s2">&quot;BIWhite&quot;</span><span class="o">]=</span><span class="s2">&quot;\033[1;97m&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;AWK_EXPRESSION<span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">for </span>i in <span class="s2">&quot;${!log[@]}&quot;</span>; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;AWK_EXPRESSION<span class="o">=</span><span class="s2">&quot;/$i/ {print \&quot;${colours[${log[$i]}]}\&quot; \$0 \&quot;\033[39m\&quot;} $AWK_EXPRESSION&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$TAIL</span> <span class="s2">&quot;$@&quot;</span> | <span class="nv">$AWK</span> <span class="s2">&quot;$AWK_EXPRESSION&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A <code>ctail.config</code> file can be created in the same folder with <code>ctail</code> to override the default colours and log levels associations.</p>

<p>The advantage of using <code>awk</code> is that it's present on most of the available Linux distributions and UNIX flavours and that it's reasonably
fast.</p>

<h3>Option no. 2: <code>ack</code></h3>

<p>Another tool used for filtering information is <a href="http://linux.die.net/man/1/ack" title="ack's man page"><code>ack</code></a>, a tool "designed as a replacement
for 99% of the uses of <code>grep</code>". A similar colorized <code>tail</code> script can be written like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ctail with ack </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tail <span class="s2">&quot;$@&quot;</span> <span class="se">\</span>
</span><span class='line'>| ack --flush --passthru --color --color-match<span class="o">=</span>red    <span class="s2">&quot;&lt;sup&gt;.&lt;em&gt;*ERROR*.&lt;/em&gt;&quot;</span>&lt;/sup&gt; <span class="se">\</span>
</span><span class='line'>| ack --flush --passthru --color --color-match<span class="o">=</span>yellow <span class="s2">&quot;&lt;sup&gt;.&lt;em&gt;*WARN*.&lt;/em&gt;&quot;</span>&lt;/sup&gt; <span class="se">\</span>
</span><span class='line'>| ack --flush --passthru --color --color-match<span class="o">=</span>green  <span class="s2">&quot;&lt;sup&gt;.&lt;em&gt;*INFO*.&lt;/em&gt;&quot;</span>&lt;/sup&gt; <span class="se">\</span>
</span><span class='line'>| ack --flush --passthru --color --color-match<span class="o">=</span>white  <span class="s2">&quot;&lt;sup&gt;.&lt;em&gt;*DEBUG*.&lt;/em&gt;&quot;</span>&lt;/sup&gt; <span class="se">\</span>
</span><span class='line'>| ack --flush --passthru --color --color-match<span class="o">=</span>white  <span class="s2">&quot;&lt;sup&gt;.&lt;em&gt;*TRACE*.&lt;/em&gt;&quot;</span>&lt;/sup&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Credits for this solution go to <a href="https://twitter.com/alexkli">Alex Klimetschek</a>, one of my colleagues from Adobe. <code>ack</code> does not come
standard on most Linux distributions, nor on Mac OS X; however, installing it is usually a few commands away with your favourite package
manager.</p>

<h2>In the end</h2>

<p>Being an avid terminal user, I find the <code>ctail</code> script (in any of its variations) a better tool than its half-baked GUI alternatives.
Furthermore, <code>ctail</code> can also be used on servers with very little setup.</p>

<p>Do you know of any other interesting ways for highlighting log messages?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A useful rant on how people write Java code]]></title>
    <link href="http://radu.cotescu.com/java-common-sense/"/>
    <updated>2012-10-21T20:49:00+03:00</updated>
    <id>http://radu.cotescu.com/java-common-sense</id>
    <content type="html"><![CDATA[<p>During the last months I've had the chance to see a lot of code written by different types of developers. Some of it has definitely made me
proud of the word "engineering" being associated with my profession; the other, not. There are a few basic unwritten rules that more or less
have become software engineering common sense.</p>

<!-- more -->


<h3>Input handling</h3>

<p>99.9% of the code written on this planet deals in some way or the other with user input. <em>The User</em> is not necessary a good person. A paranoid
engineer (all engineers should be paranoid; if you're an engineer but don't feel paranoid just quit your job!) would actually say that <em>The
User</em> is a terrible person whose only role is to create problems that the engineer has to solve. Since <em>The User</em> is such a terrible person
nothing coming from them should be trusted. This is why everything that doesn't come from a safe source (are there any safe sources for data
input?!) must be validated.</p>

<p>For example:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What would happen on line 3 if <em>The User</em> submitted null for the <code>input</code> string? That's right. The assumption that your user is a nice person
just earned you a <code>NullPointerException</code>. Now assume that your unvalidated code was delivered as part of some bigger project which accidentally
calls your wonderful method. Oh yeah, the <code>NPE</code> now hogs in their code...</p>

<p>This could have easily been avoided by:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, if the logic in your method is not as simple as that, always inform the caller of the consequences of calling your code with invalid
parameters - whether you explicitly throw an <code>Exception</code> (which is <em>documented</em>), or you just provide a default return value.</p>

<h3>Useful logging</h3>

<p>Every engineer should use a logging mechanism through which meaningful and important information is... Well, logged. Probably the most useful
information is the one which is logged in the case of an error. Assuming your logger supports a <code>Throwable</code> object as a parameter in its
<code>error</code> method, <strong>never ever</strong> do this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// code that throws a random exception</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Bla bla bla&quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's not gonna help anyone. Moreover it's going to annoy the person who encounters the error because they won't know the exact cause.
<strong>Always</strong> log your errors like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Meaningful error message&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Java is not <strike>C++</strike> C89/ANSI C</h3>

<p>Seriously! Repeat after me: <em>"Java is not <strike>C++</strike> C89/ANSI C!"</em> You don't need to declare your loop variable outside of the loop, like you used to do back in the old C. Nor do you have to declare
and initialise a variable at the beginning of a method and then change its value on the next line. What's the point?!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// int i = 0; BAD!</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">GOOD</span><span class="o">!</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//do something here</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// hilarious</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="s">&quot;random_not_null_string&quot;</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">else</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Learn how to correctly concatenate Strings</h3>

<p>Strings are immutable! Stop concatenating more than two of them with <code>+</code> if they are not constants. Every time you use <code>+</code> for something like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// assume we&#39;re in a loop</span>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">a</span> <span class="o">+</span> <span class="s">&quot; bla bla &quot;</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="s">&quot; bla bla&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>a kitten dies in terrible pain. Not only that your code is slow, it's also occupying more memory than it should. Use one of the convenient classes
for building strings, like <code>StringBuilder</code> or <code>StringBuffer</code>, the latter one being thread safe.</p>

<h3>In case you need to write JSON</h3>

<p>Don't! Seriously. Just don't. And not because I don't like JSON, but because you're probably going to do something wrong. Always use a class that
can write JSON for you. Yes, it's another dependency to your project. However the chances are that it's been tested by more developers than just one.
Code is one of those things where "the more, the merrier" expression just fits in without sounding awkward. Whether you use
<a href="http://code.google.com/p/json-simple/" title="Json.simple">Json.simple</a> or <a href="http://code.google.com/p/google-gson/" title="Gson">Gson</a>, it's up to you.</p>

<h2>As a conclusion</h2>

<p>Don't be ashamed to ask for a code review from one of your colleagues. Nobody's perfect, but the code you deliver should work no matter what data it's
fed through it. Write your application as if you're building a tank. Make it handle abuse and misuse. And don't forget to be paranoid. It helps.</p>

<p>(Many thanks to fellow Redditers who provided me with valuable feedback for two things that I haven't double checked: the String concatenation example
didn't specify that <code>+</code> should be avoided in loops, although that was the intended case; the C++ standard allows variable declarations anywhere.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why awk is better than cut]]></title>
    <link href="http://radu.cotescu.com/why-awk-is-better-than-cut/"/>
    <updated>2011-08-01T12:45:40+03:00</updated>
    <id>http://radu.cotescu.com/why-awk-is-better-than-cut</id>
    <content type="html"><![CDATA[<p>I am currently working with some text files from which I have to extract some data. Generally, when you have to do this kind of work on a *nix machine, you use <code>cut</code> or <code>awk</code>. However, even for simple tasks <code>cut</code> is superseded by the mighty <code>awk</code>. Let's look at the following examples which are closely related to the data that I'm working with. Assume we have the following text file:</p>

<p><code>bash
radu@riker:~$ cat testFile
a
b c
d
e f
</code></p>

<p>What I'd like to do is to extract the strings from each line and assign them to some parameters; obviously the second parameter can be null. To do this with <code>cut</code> you'd have to use two different call types, one for each parameter:</p>

<p><code>bash
radu@riker:~$ cat testFile | cut -d" " -f1
a
b
d
e
radu@riker:~$ cat testFile | cut -d" " -f2 -s
c
f
</code></p>

<p>Notice the <code>-s</code> option in the second call. This tells <code>cut</code> not to print lines not containing delimiters. If by mistake you'd forget to add that flag to the options list, the output would be this:</p>

<p><code>bash
radu@riker:~$ cat testFile | cut -d" " -f2
a
c
d
f
</code></p>

<p>which includes the values for the first parameter too. Not good.</p>

<p>Now let's share some <code>awk</code> love:</p>

<p>``` bash
radu@riker:~$ cat testFile | awk '{print $1}'
a
b
d
e
radu@riker:~$ cat testFile | awk '{print $2}'</p>

<p>c</p>

<p>f
```</p>

<p>Of course, if your restrictions aren't like mine you can as well use <code>cut</code>. However, you'd be safer with <code>awk</code>.</p>

<p>Happy Bash parsing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to secure your SSH server from brute-force attacks]]></title>
    <link href="http://radu.cotescu.com/ssh-brute-force-attacks/"/>
    <updated>2011-02-18T20:13:52+02:00</updated>
    <id>http://radu.cotescu.com/ssh-brute-force-attacks</id>
    <content type="html"><![CDATA[<p>There are a lot of tutorials online that will tell you how to secure your SSH server. Most of them will tell you not to allow the <code>root</code> account to login, to use only keys for authentication and possibly to change the port on which your server listens from 22 to any other. Although this is valid advice, there are times when due to zealous system administrators you <em>have</em> to use port 22 (because along with 21 and 80 it's not blocked and you <em>do</em> like to check your server from time to time). Also, you might still want to use password authentication together with public and private keys just because there are chances that you might lose your keys (it happens to the best of us). Combine these two and you are exposing your server to a lot of brute-force attacks from various script kiddies.</p>

<p>If your SSH server (generally OpenSSH) is compiled to use <a href="http://en.wikipedia.org/wiki/TCP_Wrapper">TCP Wrapper</a> you can use <a href="http://denyhosts.sourceforge.net/">DenyHosts</a> to protect yourself against the annoying attempts to hack the server. However, if you don't have the option to use a TCP Wrapper aware SSH server (which happens to be the case on almost all Linux distributions made to operate home-class routers), you're pretty much on your own. Unless you'd like to use another script I wrote while I was bored.</p>

<p>The script analyses your SSH daemon's log, identifies IPs from which there are unauthorized access attempts (the attackers usually try to login using a multitude of user/password combinations - brute-force attacks) and then denies all traffic from those IPs. Also it keeps a list of all those pesky "hackers" for times when you reboot (the part where you re-add those IPs to your <code>iptables</code> configuration is left as an exercise to you). The cherry on top of the cake is that for every bad IP the script tries to mail the ISP with the relevant parts from your log (in case you have configured <code>sendmail</code> or another MTA with a <code>sendmail</code> interface).</p>

<p>As usual, you can find the script in one of my GitHUB <a href="https://github.com/raducotescu/SSHBruteForceLogger">repos</a> with a nice README file giving you all the juicy configuration details.</p>

<p>If you can improve the script to do even more, please fork the repo. Also, if you find any bugs please let me know.</p>

<p><strong>TIP</strong>: if your kernel can use the recent module, you can add some rules like these:</p>

<p><code>bash
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 --rttl --name SSH -j LOG --log-prefix "SSH_brute_force "
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 --rttl --name SSH -j DROP
</code></p>

<p>This would assure that a user cannot open more than 8 connections in 60 seconds to your server on port 22. Of course, if the user tries to open a ninth connection, <code>iptables</code> will block the access for 60 seconds. This is just an extra measure to protect your server in addition to the script.</p>

<p>Don't let the "hackers" win!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java, HTTPS and REST web services using Apache CXF]]></title>
    <link href="http://radu.cotescu.com/java-https-rest-services-apache-cxf/"/>
    <updated>2010-12-16T23:39:23+02:00</updated>
    <id>http://radu.cotescu.com/java-https-rest-services-apache-cxf</id>
    <content type="html"><![CDATA[<p><strong>Securing REST web services</strong> is a very debated topic on the Internet. Because REST represents an architecture, and not a protocol - like SOAP -, there aren't any specifications dealing with security, leaving this aspect as a design decision for the software engineers / developers. Still, if you search the web to find out what are the approaches, you'll see that most of the results suggest you use <strong><a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic authentication</a> over <a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS</a></strong>.</p>

<p>The basic authentication is a trivial way of authenticating HTTP requests directly by the web server, without any added effort for the developer. Since REST isn't very pretentious (it uses the well known HTTP methods for accessing resources), leaving the authentication to the web server is a natural thing to do. Still, this doesn't mean that your REST API is secure. You merely separate users that should have access to your API from users that should be denied access. Enabling HTTPS on the server is the next step that needs to be followed, so that all the requests are secured. This avoids the classical man-in-the-middle attack and also assures that the credentials sent by the users aren't visible to the whole world (although they are BASE64 encoded by the basic authentication mechanism, decoding them is a child's play).</p>

<h2>A practical example</h2>

<p>For the next paragraphs, I will be very specific (the title should have already told you this). To add something more, let's assume you use <strong>Maven</strong> (because you're a real developer) and <strong>Jetty</strong> (only for testing - I assume that for production you use a proper server, like Tomcat). Enabling HTTPS on any other server shouldn't be much different.</p>

<h3><code>pom.xml</code></h3>

<p>To enable HTTPS and basic user authentication on Jetty by using Maven, you would have to use an additional plug-in for generating keystores, unless you already have a keystore that you would like to use, in which case you should not keep it in the <code>target</code> folder of your project. The following section of <code>pom.xml</code> should do the trick:</p>

<p>``` xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
&lt;artifactId&gt;keytool-maven-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;clean&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;clean&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;genkey&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;genkey&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
    &lt;dname&gt;cn=server_host_name&lt;/dname&gt;
    &lt;keypass&gt;jetty6&lt;/keypass&gt;
    &lt;storepass&gt;jetty6&lt;/storepass&gt;
    &lt;alias&gt;jetty6&lt;/alias&gt;
    &lt;keyalg&gt;RSA&lt;/keyalg&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin></p>

<pre><code>&lt;!-- Jetty support for testing --&gt;
</code></pre>

<p><plugin></p>

<pre><code>&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;start-jetty&lt;/id&gt;
        &lt;phase&gt;pre-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;run&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
            &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
            &lt;daemon&gt;true&lt;/daemon&gt;
        &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;id&gt;stop-jetty&lt;/id&gt;
        &lt;phase&gt;post-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;stop&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
    &lt;stopPort&gt;9999&lt;/stopPort&gt;
    &lt;scanIntervalSeconds&gt;2&lt;/scanIntervalSeconds&gt;
    &lt;contextPath&gt;/restws&lt;/contextPath&gt;
    &lt;userRealms&gt;
        &lt;userRealm implementation="org.mortbay.jetty.security.HashUserRealm"&gt;
            &lt;name&gt;name_of_realm&lt;/name&gt;
            &lt;config&gt;src/main/resources/sec.properties&lt;/config&gt;
        &lt;/userRealm&gt;
    &lt;/userRealms&gt;
    &lt;connectors&gt;
        &lt;connector implementation="org.mortbay.jetty.nio.SelectChannelConnector"&gt;
            &lt;port&gt;8080&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
        &lt;/connector&gt;
        &lt;connector implementation="org.mortbay.jetty.security.SslSocketConnector"&gt;
            &lt;port&gt;8443&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
            &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
            &lt;password&gt;jetty6&lt;/password&gt;
            &lt;keyPassword&gt;jetty6&lt;/keyPassword&gt;
        &lt;/connector&gt;
    &lt;/connectors&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>The highlighted lines indicate the user <strong>realm</strong>. This is a file which describes to the server who are your users and what roles are they assigned. The specified file contains records of this form:</p>

<p><code>
user: password,role
</code></p>

<h3><code>web.xml</code></h3>

<p>Now you must configure your web application to accept HTTPS encrypted content. This is done in the <strong>web.xml</strong> file, by adding the following lines of code:</p>

<p>``` xml
<security-constraint></p>

<pre><code>&lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;application_name&lt;/web-resource-name&gt;
&lt;!-- all URLs are protected --&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
    &lt;role-name&gt;user&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;user-data-constraint&gt;
    &lt;!-- redirect all requests to HTTPS --&gt;
    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
&lt;/user-data-constraint&gt;
</code></pre>

<p></security-constraint>
<login-config></p>

<pre><code>&lt;auth-method&gt;BASIC&lt;/auth-method&gt;
&lt;realm-name&gt;name_of_realm&lt;/realm-name&gt;
</code></pre>

<p></login-config>
```</p>

<h3>REST web services and Apache CXF</h3>

<p>So, everything is set up and working. Well, almost. If your REST web services also include some client code, you might encounter an exception with the following message:</p>

<p><code>java
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
</code></p>

<p>The exception is thrown because the certificate your server uses is not from a known <strong>Certificate Authority</strong>. If you have studied the POM example, you'd see that the certificate is generated at every execution of the <code>install</code> goal. Moreover, the certificate is self-signed. From here we have two solutions:</p>

<ol>
<li><p>try to create a single key store and save it in the <code>src</code> folder, configuring the server to use the file from this location; then start the server and use the program written by Andreas Sterbenz which you can find <a href="http://blogs.sun.com/andreas/entry/no_more_unable_to_find">here</a>; grab the certificate and move the resulted file into the security folder of your JRE (on Linux this should be <code>/usr/lib/jvm/java-6-sun/jre/lib/security/</code>); although this will work okay on your machine, if your project should be accessed by multiple developers, each member of the team has to add that certificate to his/hers JVM (which is not quite nice);</p></li>
<li><p>create an<strong> alternative <code>TrustStore</code></strong> used only by your application; this is by far the most elegant solution, which adds some more code to the application but doesn't force your team members to add dummy certificates to their JVM.</p></li>
</ol>


<h4>Implementing the <code>TrustStore</code></h4>

<p>The class implementing the <code>X509TrustManager</code> is trivial:</p>

<p>``` java
public class FakeTrustManager implements javax.net.ssl.X509TrustManager {</p>

<pre><code>public java.security.cert.X509Certificate[] getAcceptedIssuers() {
    return null;
}
public void checkClientTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
public void checkServerTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
</code></pre>

<p>}
```</p>

<p>To make all your <strong>Apache CXF REST</strong> <strong>clients</strong> use the new trust store, it is necessary to create a static method in an utility class that sets everything up for the clients:</p>

<p>``` java
public static void setClientAuthentication(Object client) {</p>

<pre><code>Properties p = PropertiesLoader
        .getPropertiesFromFile("config.properties");
ClientConfiguration config = WebClient.getConfig(client);
HTTPConduit httpConduit = (HTTPConduit) config.getConduit();
if (p.getProperty("user.name") != null
        &amp;&amp; p.getProperty("user.password") != null) {
    AuthorizationPolicy authorization = new AuthorizationPolicy();
    authorization.setUserName(p.getProperty("user.name"));
    authorization.setPassword(p.getProperty("user.password"));
    httpConduit.setAuthorization(authorization);
}
TLSClientParameters tlsParams = new TLSClientParameters();
TrustManager[] trustAllCerts = new TrustManager[] { new FakeTrustManager() };
tlsParams.setTrustManagers(trustAllCerts);
// disables verification of the common name (the host for which the certificate has been issued)
tlsParams.setDisableCNCheck(true);
httpConduit.setTlsClientParameters(tlsParams);
</code></pre>

<p>}
```</p>

<p>The properties file you see loaded in the previous code output contains the username and password for authentication, but it's different from the realm. This is because the realm would be harder to parse, although the information is still plain text. Although it might seem redundant to have the username and password in two files, the realm can actually hold users belonging to different roles - therefore the parsing effort.</p>

<p>The <code>PropertiesLoader</code> class is not standard, but again it's something trivial:</p>

<p>``` java
import java.net.URL;
import java.util.Properties;
public class PropertiesLoader {</p>

<pre><code>public static Properties getPropertiesFromFile(String propertiesFile) {
    Properties p = new Properties();
    ClassLoader loader = PropertiesLoader.class.getClassLoader();
    if (loader == null) {
        loader = ClassLoader.getSystemClassLoader();
    }
    URL url = loader.getResource(propertiesFile);
    try {
        p.load(url.openStream());
    } catch (Exception e) {
        System.err.println("Could not load configuration file: "
                + propertiesFile);
    }
    return p;
}
</code></pre>

<p>}
```</p>

<p>Having done all this, your clients should now work as expected. Just remember that the <code>FakeTrustStore</code> is to be used <em>only</em> for testing purposes.</p>
]]></content>
  </entry>
  
</feed>
