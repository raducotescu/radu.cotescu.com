<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Radu Cotescu's professional blog]]></title>
  <link href="http://raducotescu.github.com/radu/category/code/atom.xml" rel="self"/>
  <link href="http://raducotescu.github.com/radu/"/>
  <updated>2012-10-18T00:17:11+03:00</updated>
  <id>http://raducotescu.github.com/radu/</id>
  <author>
    <name><![CDATA[Radu Cotescu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why awk is better than cut]]></title>
    <link href="http://raducotescu.github.com/radu/why-awk-is-better-than-cut/"/>
    <updated>2011-08-01T12:45:40+03:00</updated>
    <id>http://raducotescu.github.com/radu/why-awk-is-better-than-cut</id>
    <content type="html"><![CDATA[<p>I am currently working with some text files from which I have to extract some data. Generally, when you have to do this kind of work on a *nix machine, you use <code>cut</code> or <code>awk</code>. However, even for simple tasks <code>cut</code> is superseded by the mighty <code>awk</code>. Let's look at the following examples which are closely related to the data that I'm working with. Assume we have the following text file:</p>

<p><code>bash
radu@riker:~$ cat testFile
a
b c
d
e f
</code></p>

<p>What I'd like to do is to extract the strings from each line and assign them to some parameters; obviously the second parameter can be null. To do this with <code>cut</code> you'd have to use two different call types, one for each parameter:</p>

<p><code>bash
radu@riker:~$ cat testFile | cut -d" " -f1
a
b
d
e
radu@riker:~$ cat testFile | cut -d" " -f2 -s
c
f
</code></p>

<p>Notice the <code>-s</code> option in the second call. This tells <code>cut</code> not to print lines not containing delimiters. If by mistake you'd forget to add that flag to the options list, the output would be this:</p>

<p><code>bash
radu@riker:~$ cat testFile | cut -d" " -f2
a
c
d
f
</code></p>

<p>which includes the values for the first parameter too. Not good.</p>

<p>Now let's share some <code>awk</code> love:</p>

<p>``` bash
radu@riker:~$ cat testFile | awk '{print $1}'
a
b
d
e
radu@riker:~$ cat testFile | awk '{print $2}'</p>

<p>c</p>

<p>f
```</p>

<p>Of course, if your restrictions aren't like mine you can as well use <code>cut</code>. However, you'd be safer with <code>awk</code>.</p>

<p>Happy Bash parsing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to secure your SSH server from brute-force attacks]]></title>
    <link href="http://raducotescu.github.com/radu/ssh-brute-force-attacks/"/>
    <updated>2011-02-18T20:13:52+02:00</updated>
    <id>http://raducotescu.github.com/radu/ssh-brute-force-attacks</id>
    <content type="html"><![CDATA[<p>There are a lot of tutorials online that will tell you how to secure your SSH server. Most of them will tell you not to allow the <code>root</code> account to login, to use only keys for authentication and possibly to change the port on which your server listens from 22 to any other. Although this is valid advice, there are times when due to zealous system administrators you <em>have</em> to use port 22 (because along with 21 and 80 it's not blocked and you <em>do</em> like to check your server from time to time). Also, you might still want to use password authentication together with public and private keys just because there are chances that you might lose your keys (it happens to the best of us). Combine these two and you are exposing your server to a lot of brute-force attacks from various script kiddies.</p>

<p>If your SSH server (generally OpenSSH) is compiled to use <a href="http://en.wikipedia.org/wiki/TCP_Wrapper">TCP Wrapper</a> you can use <a href="http://denyhosts.sourceforge.net/">DenyHosts</a> to protect yourself against the annoying attempts to hack the server. However, if you don't have the option to use a TCP Wrapper aware SSH server (which happens to be the case on almost all Linux distributions made to operate home-class routers), you're pretty much on your own. Unless you'd like to use another script I wrote while I was bored.</p>

<p>The script analyses your SSH daemon's log, identifies IPs from which there are unauthorized access attempts (the attackers usually try to login using a multitude of user/password combinations - brute-force attacks) and then denies all traffic from those IPs. Also it keeps a list of all those pesky "hackers" for times when you reboot (the part where you re-add those IPs to your <code>iptables</code> configuration is left as an exercise to you). The cherry on top of the cake is that for every bad IP the script tries to mail the ISP with the relevant parts from your log (in case you have configured <code>sendmail</code> or another MTA with a <code>sendmail</code> interface).</p>

<p>As usual, you can find the script in one of my GitHUB <a href="https://github.com/raducotescu/SSHBruteForceLogger">repos</a> with a nice README file giving you all the juicy configuration details.</p>

<p>If you can improve the script to do even more, please fork the repo. Also, if you find any bugs please let me know.</p>

<p><strong>TIP</strong>: if your kernel can use the recent module, you can add some rules like these:</p>

<p><code>bash
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --set --name SSH
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 --rttl --name SSH -j LOG --log-prefix "SSH_brute_force "
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 --rttl --name SSH -j DROP
</code></p>

<p>This would assure that a user cannot open more than 8 connections in 60 seconds to your server on port 22. Of course, if the user tries to open a ninth connection, <code>iptables</code> will block the access for 60 seconds. This is just an extra measure to protect your server in addition to the script.</p>

<p>Don't let the "hackers" win!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java, HTTPS and REST web services using Apache CXF]]></title>
    <link href="http://raducotescu.github.com/radu/java-https-rest-services-apache-cxf/"/>
    <updated>2010-12-16T23:39:23+02:00</updated>
    <id>http://raducotescu.github.com/radu/java-https-rest-services-apache-cxf</id>
    <content type="html"><![CDATA[<p><strong>Securing REST web services</strong> is a very debated topic on the Internet. Because REST represents an architecture, and not a protocol - like SOAP -, there aren't any specifications dealing with security, leaving this aspect as a design decision for the software engineers / developers. Still, if you search the web to find out what are the approaches, you'll see that most of the results suggest you use <strong><a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic authentication</a> over <a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS</a></strong>.</p>

<p>The basic authentication is a trivial way of authenticating HTTP requests directly by the web server, without any added effort for the developer. Since REST isn't very pretentious (it uses the well known HTTP methods for accessing resources), leaving the authentication to the web server is a natural thing to do. Still, this doesn't mean that your REST API is secure. You merely separate users that should have access to your API from users that should be denied access. Enabling HTTPS on the server is the next step that needs to be followed, so that all the requests are secured. This avoids the classical man-in-the-middle attack and also assures that the credentials sent by the users aren't visible to the whole world (although they are BASE64 encoded by the basic authentication mechanism, decoding them is a child's play).</p>

<h2>A practical example</h2>

<p>For the next paragraphs, I will be very specific (the title should have already told you this). To add something more, let's assume you use <strong>Maven</strong> (because you're a real developer) and <strong>Jetty</strong> (only for testing - I assume that for production you use a proper server, like Tomcat). Enabling HTTPS on any other server shouldn't be much different.</p>

<h3><code>pom.xml</code></h3>

<p>To enable HTTPS and basic user authentication on Jetty by using Maven, you would have to use an additional plug-in for generating keystores, unless you already have a keystore that you would like to use, in which case you should not keep it in the <code>target</code> folder of your project. The following section of <code>pom.xml</code> should do the trick:</p>

<p>``` xml
<plugin></p>

<pre><code>&lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
&lt;artifactId&gt;keytool-maven-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;clean&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;clean&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;phase&gt;generate-resources&lt;/phase&gt;
        &lt;id&gt;genkey&lt;/id&gt;
        &lt;goals&gt;
            &lt;goal&gt;genkey&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
    &lt;dname&gt;cn=server_host_name&lt;/dname&gt;
    &lt;keypass&gt;jetty6&lt;/keypass&gt;
    &lt;storepass&gt;jetty6&lt;/storepass&gt;
    &lt;alias&gt;jetty6&lt;/alias&gt;
    &lt;keyalg&gt;RSA&lt;/keyalg&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin></p>

<pre><code>&lt;!-- Jetty support for testing --&gt;
</code></pre>

<p><plugin></p>

<pre><code>&lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
&lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
&lt;executions&gt;
    &lt;execution&gt;
        &lt;id&gt;start-jetty&lt;/id&gt;
        &lt;phase&gt;pre-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;run&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
            &lt;scanIntervalSeconds&gt;0&lt;/scanIntervalSeconds&gt;
            &lt;daemon&gt;true&lt;/daemon&gt;
        &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
        &lt;id&gt;stop-jetty&lt;/id&gt;
        &lt;phase&gt;post-integration-test&lt;/phase&gt;
        &lt;goals&gt;
            &lt;goal&gt;stop&lt;/goal&gt;
        &lt;/goals&gt;
    &lt;/execution&gt;
&lt;/executions&gt;
&lt;configuration&gt;
    &lt;stopKey&gt;foo&lt;/stopKey&gt;
    &lt;stopPort&gt;9999&lt;/stopPort&gt;
    &lt;scanIntervalSeconds&gt;2&lt;/scanIntervalSeconds&gt;
    &lt;contextPath&gt;/restws&lt;/contextPath&gt;
    &lt;userRealms&gt;
        &lt;userRealm implementation="org.mortbay.jetty.security.HashUserRealm"&gt;
            &lt;name&gt;name_of_realm&lt;/name&gt;
            &lt;config&gt;src/main/resources/sec.properties&lt;/config&gt;
        &lt;/userRealm&gt;
    &lt;/userRealms&gt;
    &lt;connectors&gt;
        &lt;connector implementation="org.mortbay.jetty.nio.SelectChannelConnector"&gt;
            &lt;port&gt;8080&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
        &lt;/connector&gt;
        &lt;connector implementation="org.mortbay.jetty.security.SslSocketConnector"&gt;
            &lt;port&gt;8443&lt;/port&gt;
            &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
            &lt;keystore&gt;${project.build.directory}/jetty-ssl.keystore&lt;/keystore&gt;
            &lt;password&gt;jetty6&lt;/password&gt;
            &lt;keyPassword&gt;jetty6&lt;/keyPassword&gt;
        &lt;/connector&gt;
    &lt;/connectors&gt;
&lt;/configuration&gt;
</code></pre>

<p></plugin>
```</p>

<p>The highlighted lines indicate the user <strong>realm</strong>. This is a file which describes to the server who are your users and what roles are they assigned. The specified file contains records of this form:</p>

<p><code>
user: password,role
</code></p>

<h3><code>web.xml</code></h3>

<p>Now you must configure your web application to accept HTTPS encrypted content. This is done in the <strong>web.xml</strong> file, by adding the following lines of code:</p>

<p>``` xml
<security-constraint></p>

<pre><code>&lt;web-resource-collection&gt;
    &lt;web-resource-name&gt;application_name&lt;/web-resource-name&gt;
&lt;!-- all URLs are protected --&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
    &lt;role-name&gt;user&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;user-data-constraint&gt;
    &lt;!-- redirect all requests to HTTPS --&gt;
    &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;
&lt;/user-data-constraint&gt;
</code></pre>

<p></security-constraint>
<login-config></p>

<pre><code>&lt;auth-method&gt;BASIC&lt;/auth-method&gt;
&lt;realm-name&gt;name_of_realm&lt;/realm-name&gt;
</code></pre>

<p></login-config>
```</p>

<h3>REST web services and Apache CXF</h3>

<p>So, everything is set up and working. Well, almost. If your REST web services also include some client code, you might encounter an exception with the following message:</p>

<p><code>java
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
</code></p>

<p>The exception is thrown because the certificate your server uses is not from a known <strong>Certificate Authority</strong>. If you have studied the POM example, you'd see that the certificate is generated at every execution of the <code>install</code> goal. Moreover, the certificate is self-signed. From here we have two solutions:</p>

<ol>
<li><p>try to create a single key store and save it in the <code>src</code> folder, configuring the server to use the file from this location; then start the server and use the program written by Andreas Sterbenz which you can find <a href="http://blogs.sun.com/andreas/entry/no_more_unable_to_find">here</a>; grab the certificate and move the resulted file into the security folder of your JRE (on Linux this should be <code>/usr/lib/jvm/java-6-sun/jre/lib/security/</code>); although this will work okay on your machine, if your project should be accessed by multiple developers, each member of the team has to add that certificate to his/hers JVM (which is not quite nice);</p></li>
<li><p>create an<strong> alternative <code>TrustStore</code></strong> used only by your application; this is by far the most elegant solution, which adds some more code to the application but doesn't force your team members to add dummy certificates to their JVM.</p></li>
</ol>


<h4>Implementing the <code>TrustStore</code></h4>

<p>The class implementing the <code>X509TrustManager</code> is trivial:</p>

<p>``` java
public class FakeTrustManager implements javax.net.ssl.X509TrustManager {</p>

<pre><code>public java.security.cert.X509Certificate[] getAcceptedIssuers() {
    return null;
}
public void checkClientTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
public void checkServerTrusted(java.security.cert.X509Certificate[] certs,
        String authType) {
}
</code></pre>

<p>}
```</p>

<p>To make all your <strong>Apache CXF REST</strong> <strong>clients</strong> use the new trust store, it is necessary to create a static method in an utility class that sets everything up for the clients:</p>

<p>``` java
public static void setClientAuthentication(Object client) {</p>

<pre><code>Properties p = PropertiesLoader
        .getPropertiesFromFile("config.properties");
ClientConfiguration config = WebClient.getConfig(client);
HTTPConduit httpConduit = (HTTPConduit) config.getConduit();
if (p.getProperty("user.name") != null
        &amp;&amp; p.getProperty("user.password") != null) {
    AuthorizationPolicy authorization = new AuthorizationPolicy();
    authorization.setUserName(p.getProperty("user.name"));
    authorization.setPassword(p.getProperty("user.password"));
    httpConduit.setAuthorization(authorization);
}
TLSClientParameters tlsParams = new TLSClientParameters();
TrustManager[] trustAllCerts = new TrustManager[] { new FakeTrustManager() };
tlsParams.setTrustManagers(trustAllCerts);
// disables verification of the common name (the host for which the certificate has been issued)
tlsParams.setDisableCNCheck(true);
httpConduit.setTlsClientParameters(tlsParams);
</code></pre>

<p>}
```</p>

<p>The properties file you see loaded in the previous code output contains the username and password for authentication, but it's different from the realm. This is because the realm would be harder to parse, although the information is still plain text. Although it might seem redundant to have the username and password in two files, the realm can actually hold users belonging to different roles - therefore the parsing effort.</p>

<p>The <code>PropertiesLoader</code> class is not standard, but again it's something trivial:</p>

<p>``` java
import java.net.URL;
import java.util.Properties;
public class PropertiesLoader {</p>

<pre><code>public static Properties getPropertiesFromFile(String propertiesFile) {
    Properties p = new Properties();
    ClassLoader loader = PropertiesLoader.class.getClassLoader();
    if (loader == null) {
        loader = ClassLoader.getSystemClassLoader();
    }
    URL url = loader.getResource(propertiesFile);
    try {
        p.load(url.openStream());
    } catch (Exception e) {
        System.err.println("Could not load configuration file: "
                + propertiesFile);
    }
    return p;
}
</code></pre>

<p>}
```</p>

<p>Having done all this, your clients should now work as expected. Just remember that the <code>FakeTrustStore</code> is to be used <em>only</em> for testing purposes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery .click() and the double submit of a form]]></title>
    <link href="http://raducotescu.github.com/radu/jquery-click-double-submit/"/>
    <updated>2010-09-07T14:21:41+03:00</updated>
    <id>http://raducotescu.github.com/radu/jquery-click-double-submit</id>
    <content type="html"><![CDATA[<p>jQuery is one of the greatest JavaScript frameworks with plenty of documentation for just about everything one can do with it. In my latest project I have used jQuery extensively for any UX aspect: form validations, dialogs, error messages, AJAX, UI, etc.</p>

<p>A feature that I would really like to see implemented on all HTML forms is the ability to submit the form by using the Return key as well. I am sure that there are a lot of users who really like to keep their hands on the keyboard as much as possible, without using the mouse just to click a button or without hitting the TAB key in order to focus on the submit button after which to press Return. Some of the particularities of my project are the fact that it uses Struts2 and the <a href="http://code.google.com/p/struts2-jquery/">Struts2 jQuery plugin</a>. This plugin allows developers either to use the <code>.jar</code> embedded JavaScript libraries or to automatically get the required files from Google's servers (CDN). In July, when my project was using Oracle 11G and TopLink everything worked okay. Now, after I have migrated the project to open-source solutions (MySQL and EclipseLink) I have noticed that whenever I tried to create a new account into the application I would get 2 submits for one action. At first I thought that this had something to do with EclipseLink. After some debugging I actually found out that it was a JavaScript issue (it is possible that now I'm using another jQuery UI release).</p>

<h2>The problem</h2>

<p>The code responsible for the issue is the following:</p>

<p>``` javascript
$('#newProfileForm input:submit').button().click(function(e) {</p>

<pre><code>if(checkInputs()) {
    $('#newProfileForm form').submit();
}
</code></pre>

<p>});
$('#newProfileForm input').keyup(function(e) {</p>

<pre><code>var code = (e.keyCode ? e.keyCode : e.which);
if(code == 13) {
    if(checkInputs()) {
        $('#newProfileForm').submit();
    }
</code></pre>

<p>   }
});
```</p>

<p>What I have discovered is that the <code>.click()</code> handler actually binds itself to keyboard events too, not only mouse events. This means that if the user presses the Return button the event will be identified with a click event.</p>

<h2>The solution</h2>

<p>Even though if the behaviour mentioned previously is unexpected (who would have thought that a click event would be triggered by the keyboard even if the focus is not set on the submit button?!), there are two ways of avoiding it in the code above:</p>

<ol>
<li><p>eliminate the <code>.keyup()</code> handler because pressing on the Return button will be considered a click event;</p></li>
<li><p>alter the first bind for the <code>.click()</code> handler like this:
<code>javascript
$('#newProfileForm input:submit').button().click(function(e) {
e.preventDefault(); // stop the browser's default behaviour
if(checkInputs()) {
   $('#newProfileForm form').submit();
}
});
</code></p></li>
</ol>


<p>Have you ever had similar problems?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitosis and read-only Git repositories]]></title>
    <link href="http://raducotescu.github.com/radu/gitosis-read-only-git-repositories/"/>
    <updated>2010-07-26T20:50:26+03:00</updated>
    <id>http://raducotescu.github.com/radu/gitosis-read-only-git-repositories</id>
    <content type="html"><![CDATA[<p>When I've started working with <a href="http://git-scm.com/">Git</a>, besides using the quick how-to guides from the official site, I've also wanted to read a more detailed book about how this distributed VCS tool should be used in order to benefit from all of its functionalities. One of these books is <a href="http://www.amazon.com/gp/product/1430218339?ie=UTF8&amp;tag=prgi-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430218339">Pro Git</a> by Scott Chacon, from Apress. The e-book version I own dates from September 2009, although its content is freely available (with the proper updates and revisions) <a href="http://progit.org/">here</a>.</p>

<p>One of the most interesting tools for Git is Gitosis, an application which allows you to automate repository management and to have your own hosted repo on one of your servers (click <a href="apt:gitosis">here</a> to install it on Ubuntu; a good start-up guide can be found <a href="http://www.howtoforge.com/setting-up-gitosis-on-ubuntu">here</a>). In my case, this server is <a href="http://radu.cotescu.com/geeks-and-their-computers/">Geordi</a>. While I do use <a href="http://github.com/raducotescu">GitHub</a> too, Gitosis manages my non-public projects. Not only that Gitosis creates your repositories on the server once you need them, but it also handles user access allowing to have multiple users (commiters or followers) with read/write rights depending on the project.</p>

<p>Today I wanted to allow <a href="http://blog.motane.lu">Tudor</a> to be able to clone one of my private repositories but in the same time I didn't want to give him push permissions. The edition of Pro Git I have listed this configuration for the previous job:</p>

<p>``` bash
[group groupName]
writable = repoName
members = user1 user 2 user3</p>

<p>[group groupName-readonly]
readable = repoName
members = user 4
```</p>

<p>With this set-up, every time when Tudor tried to clone my repository, Gitosis would respond with:</p>

<p><code>bash
ERROR:gitosis.serve.main:Repository read access denied
fatal: The remote end hung up unexpectedly
</code></p>

<p>The problem was on the highlighted line. It seems that the correct keyword for setting read-only user access is nothing other than <em><strong><code>readonly</code></strong></em>. With that put up in place everything worked as it should from the beginning. Although the online book now uses the correct keyword, you might still find PDF files of the book with the wrong example in which case you now have a solution.</p>

<p>Keep on pushing! ;)</p>
]]></content>
  </entry>
  
</feed>
